Approach 1:-
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
     Arrays.sort(deck);
     int n=deck.length;
     int []result=new int[n];
     int i=0;
     int j=0;
     boolean skip=false;
     while(i<n)
     {
        if(result[j]==0)
        {
            if(skip==false)
            {
                result[j]=deck[i];
                i++;
            }
           
            skip=!skip;
           
        }
        j=(j+1)%n;

     }
     return result;
   
    }
}

Approach 2:-
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck);
        int n=deck.length;
        Queue<Integer>q=new LinkedList<>();
        for(int i=0;i<n;i++)
        {
            q.add(i);
        }
        int[]result=new int[n];
        for(int i=0;i<n;i++)
        {
            int ind=q.poll();
            result[ind]=deck[i];
            if(!q.isEmpty())
            {
                int x=q.poll();
                q.add(x);
            }
        }
        return result;
        
    }
}
