class Solution {
    public boolean helper(ArrayList<ArrayList<Integer>>adj,int source,int destination,boolean[]temp){
     boolean ans=false;
        if(source==destination)
        {
           ans=true;
        }
        temp[source]=true;
       
        int size=adj.get(source).size();
        for(int i=0;i<size;i++)
        {
           if(ans==true)
           {
            return true;
           }
            if(temp[adj.get(source).get(i)]==false){
           ans= helper(adj,adj.get(source).get(i),destination,temp);
        
        }
        }
        return ans;
        
    }
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        boolean[] temp=new boolean[n];
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        
            if(source==destination)
            {
                return true;
            }
           
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        return helper(adj,source,destination,temp);
       


        
    }
}
