class Solution {

    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if (n == 1||n==0) {
            return Collections.singletonList(0);
        }
        List<Integer>ans= new ArrayList<>();
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
adj.add(new ArrayList<>());
        }
        int[]indegree= new int[n];
        for(int i=0;i<edges.length;i++)
        {
            int x=edges[i][0];
            int y=edges[i][1];
            indegree[x]++;
            indegree[y]++;
            adj.get(x).add(y);
            adj.get(y).add(x);
        }
        Queue<Integer>q=new LinkedList<>();
        for(int i=0;i<n;i++)
        {
            if(indegree[i]==1)
            {
                q.offer(i);
            }
        }
        while(n>2)
        {
            int size=q.size();
            n-=size;
            while(size-->0)
            {
                int x=q.poll();
                for(int i=0;i<adj.get(x).size();i++)
                {
                    indegree[adj.get(x).get(i)]--;
                    if(indegree[adj.get(x).get(i)]==1)
                    {
                        q.offer(adj.get(x).get(i));
                    }
                }
            }
        }
        while(!q.isEmpty())
        {
            ans.add(q.poll());
        }
        return ans;
    }
}
      
